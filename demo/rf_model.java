/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2021-02-25T10:16:53.027-05:00
  3.32.0.3
  
  Standalone prediction code with sample test data for DRFModel named rf_model

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/rf_model > rf_model.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m rf_model.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="rf_model", algorithm="drf")
public class rf_model extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_rf_model.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* AGE */ null,
    /* RACE */ rf_model_ColInfo_1.VALUES,
    /* PSA */ null,
    /* GLEASON */ null,
    /* CAPSULE */ rf_model_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.5973684210526315,0.4026315789473684};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.5973684210526315,0.4026315789473684};

  public rf_model() { super(NAMES,DOMAINS,"CAPSULE"); }
  public String getUUID() { return Long.toString(-1424075989895028637L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    rf_model_Forest_0.score0(data,preds);
    rf_model_Forest_1.score0(data,preds);
    rf_model_Forest_2.score0(data,preds);
    rf_model_Forest_3.score0(data,preds);
    rf_model_Forest_4.score0(data,preds);
    rf_model_Forest_5.score0(data,preds);
    rf_model_Forest_6.score0(data,preds);
    rf_model_Forest_7.score0(data,preds);
    rf_model_Forest_8.score0(data,preds);
    rf_model_Forest_9.score0(data,preds);
    preds[1] /= 10;
    preds[2] = 1.0 - preds[1];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.43013908724921995);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_rf_model implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_rf_model_0.fill(VALUES);
  }
  static final class NamesHolder_rf_model_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AGE";
      sa[1] = "RACE";
      sa[2] = "PSA";
      sa[3] = "GLEASON";
    }
  }
}
// The class representing column RACE
class rf_model_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    rf_model_ColInfo_1_0.fill(VALUES);
  }
  static final class rf_model_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
    }
  }
}
// The class representing column CAPSULE
class rf_model_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    rf_model_ColInfo_4_0.fill(VALUES);
  }
  static final class rf_model_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class rf_model_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_0_class_0.score0(fdata);
  }
}
class rf_model_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* PSA */] <14.730078f ? 
         (data[2 /* PSA */] <2.850629f ? 
             (data[2 /* PSA */] <1.3511381f ? 
                1.0f : 
                 (data[3 /* GLEASON */] <5.5f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <2.5056999f ? 
                        0.7419417f : 
                        1.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                 (data[3 /* GLEASON */] <5.5f ? 
                     (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                        0.89825153f : 
                        1.0f) : 
                     (data[2 /* PSA */] <6.5535574f ? 
                        0.81642f : 
                        0.6561936f)) : 
                 (data[2 /* PSA */] <7.942156f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <7.3368864f ? 
                        0.39099795f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.65624183f : 
                        0.34012538f)))) : 
         (data[3 /* GLEASON */] <6.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.462696f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <27.924421f ? 
                     (data[0 /* AGE */] <62.5f ? 
                        0.0f : 
                        0.75782496f) : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <59.792397f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                 (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <70.5f ? 
                        0.17277394f : 
                        0.5459155f) : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <63.58906f ? 
                        0.50365525f : 
                        1.0f)) : 
                 (data[0 /* AGE */] <65.5f ? 
                    0.0f : 
                     (data[2 /* PSA */] <18.703125f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 104B, number of visited nodes = 23, static init size = 60B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class rf_model_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_1_class_0.score0(fdata);
  }
}
class rf_model_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* AGE */] <60.5f ? 
         (data[2 /* PSA */] <6.2898436f ? 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <4.0844755f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <5.4397335f ? 
                        0.6659619f : 
                        1.0f)) : 
                 (data[2 /* PSA */] <3.1455564f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <5.082266f ? 
                        0.51445967f : 
                        1.0f))) : 
             (data[3 /* GLEASON */] <5.5f ? 
                1.0f : 
                 (data[3 /* GLEASON */] <6.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <35.282146f ? 
                        0.46011534f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.21716766f : 
                        0.0f)))) : 
         (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.417187f ? 
                 (data[3 /* GLEASON */] <5.5f ? 
                     (data[0 /* AGE */] <61.5f ? 
                        0.5015432f : 
                        0.9130482f) : 
                     (data[0 /* AGE */] <62.5f ? 
                        0.63596886f : 
                        0.77886015f)) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <57.706013f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <15.002344f ? 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (data[0 /* AGE */] <62.5f ? 
                        0.24203338f : 
                        0.5945421f) : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <76.5f ? 
                        0.19695123f : 
                        1.0f)) : 
                 (Double.isNaN(data[0]) || data[0 /* AGE */] <73.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <33.512154f ? 
                        0.3216413f : 
                        0.08292001f) : 
                     (data[2 /* PSA */] <19.873346f ? 
                        0.0f : 
                        0.661868f)))));
    return pred;
  } // constant pool size = 98B, number of visited nodes = 24, static init size = 0B
}


class rf_model_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_2_class_0.score0(fdata);
  }
}
class rf_model_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
         (Double.isNaN(data[2]) || data[2 /* PSA */] <38.55332f ? 
             (!Double.isNaN(data[1 /* RACE */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                 (data[2 /* PSA */] <5.9782276f ? 
                     (data[3 /* GLEASON */] <5.5f ? 
                        1.0f : 
                        0.8230654f) : 
                     (data[3 /* GLEASON */] <5.5f ? 
                        0.83653766f : 
                        0.6464309f)) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <9.564476f ? 
                    1.0f : 
                     (data[0 /* AGE */] <68.5f ? 
                        0.6519453f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <59.799477f ? 
                0.0f : 
                1.0f)) : 
         (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <66.73281f ? 
                 (data[0 /* AGE */] <66.5f ? 
                     (data[0 /* AGE */] <51.5f ? 
                        1.0f : 
                        0.30495015f) : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <13.554375f ? 
                        0.65050787f : 
                        0.41581956f)) : 
                0.0f) : 
             (data[0 /* AGE */] <66.5f ? 
                 (data[2 /* PSA */] <7.3789062f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* AGE */] <67.5f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <76.5f ? 
                        0.17796491f : 
                        0.5086614f)))));
    return pred;
  } // constant pool size = 79B, number of visited nodes = 18, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class rf_model_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_3_class_0.score0(fdata);
  }
}
class rf_model_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
         (data[3 /* GLEASON */] <5.5f ? 
             (data[2 /* PSA */] <5.7453127f ? 
                1.0f : 
                 (data[2 /* PSA */] <6.158667f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <17.55175f ? 
                        0.9084882f : 
                        0.70542985f))) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.417187f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <6.553601f ? 
                     (data[0 /* AGE */] <54.5f ? 
                        1.0f : 
                        0.81479037f) : 
                     (data[2 /* PSA */] <9.014201f ? 
                        0.5451915f : 
                        0.7678115f)) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <59.78884f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* PSA */] <14.730078f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <7.9312882f ? 
                 (data[2 /* PSA */] <2.9503222f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <7.3586287f ? 
                        0.39110488f : 
                        0.0f)) : 
                 (data[2 /* PSA */] <8.539414f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.6242069f : 
                        0.3283433f))) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                 (data[2 /* PSA */] <21.564371f ? 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <68.0f ? 
                        0.19867413f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <70.5f ? 
                        0.3134182f : 
                        0.87738854f)) : 
                 (data[0 /* AGE */] <65.5f ? 
                    0.0f : 
                     (data[2 /* PSA */] <18.635387f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}


class rf_model_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_4_class_0.score0(fdata);
  }
}
class rf_model_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
         (data[3 /* GLEASON */] <5.5f ? 
             (data[2 /* PSA */] <5.7453127f ? 
                1.0f : 
                 (data[2 /* PSA */] <6.158667f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <68.5f ? 
                        0.9552554f : 
                        0.7739901f))) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.417187f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <6.553601f ? 
                     (data[2 /* PSA */] <1.3259814f ? 
                        1.0f : 
                        0.8140716f) : 
                     (data[2 /* PSA */] <9.014201f ? 
                        0.5475475f : 
                        0.7632063f)) : 
                 (data[0 /* AGE */] <63.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <59.78884f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
         (data[2 /* PSA */] <14.730078f ? 
             (data[0 /* AGE */] <63.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <12.892567f ? 
                     (data[0 /* AGE */] <56.5f ? 
                        0.50311524f : 
                        0.07659774f) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (data[2 /* PSA */] <3.180011f ? 
                        1.0f : 
                        0.56508213f) : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <76.5f ? 
                        0.20980194f : 
                        1.0f))) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <66.9636f ? 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (data[2 /* PSA */] <21.32045f ? 
                        0.13040559f : 
                        0.55349f) : 
                     (data[2 /* PSA */] <18.87528f ? 
                        0.5208648f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}


class rf_model_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_5_class_0.score0(fdata);
  }
}
class rf_model_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* PSA */] <14.730078f ? 
         (Double.isNaN(data[0]) || data[0 /* AGE */] <72.5f ? 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <6.5567913f ? 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <71.5f ? 
                        0.88208765f : 
                        0.0f) : 
                     (data[0 /* AGE */] <59.5f ? 
                        0.59481186f : 
                        0.7889378f)) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <10.897088f ? 
                     (data[2 /* PSA */] <3.0162737f ? 
                        1.0f : 
                        0.40470117f) : 
                     (data[0 /* AGE */] <62.5f ? 
                        0.50725746f : 
                        0.76900935f))) : 
             (data[2 /* PSA */] <3.4565794f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* AGE */] <75.5f ? 
                     (data[2 /* PSA */] <7.245621f ? 
                        0.0f : 
                        0.5242647f) : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <11.364145f ? 
                        0.7871451f : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* AGE */] <72.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <34.012547f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <31.686028f ? 
                     (data[0 /* AGE */] <61.5f ? 
                        0.12705791f : 
                        0.41602165f) : 
                    1.0f) : 
                 (data[0 /* AGE */] <54.5f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <67.03988f ? 
                        0.15376426f : 
                        0.0f))) : 
             (data[2 /* PSA */] <16.926815f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <55.978905f ? 
                        0.8855548f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 90B, number of visited nodes = 22, static init size = 0B
}


class rf_model_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_6_class_0.score0(fdata);
  }
}
class rf_model_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* PSA */] <14.730078f ? 
         (data[2 /* PSA */] <2.850629f ? 
             (data[2 /* PSA */] <1.3511381f ? 
                1.0f : 
                 (data[0 /* AGE */] <61.5f ? 
                    1.0f : 
                     (data[0 /* AGE */] <64.5f ? 
                        0.4973262f : 
                        0.89153314f))) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                 (data[3 /* GLEASON */] <5.5f ? 
                     (data[2 /* PSA */] <5.8129716f ? 
                        1.0f : 
                        0.87651587f) : 
                     (data[0 /* AGE */] <55.5f ? 
                        0.44413486f : 
                        0.76065093f)) : 
                 (!Double.isNaN(data[1 /* RACE */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                    0.2012012f : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.514484f : 
                        0.34402257f)))) : 
         (data[3 /* GLEASON */] <6.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.462696f ? 
                 (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <27.924421f ? 
                        0.67186284f : 
                        1.0f) : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <59.792397f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <67.004295f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <64.149376f ? 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.3378701f : 
                        0.1159581f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 88B, number of visited nodes = 19, static init size = 60B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class rf_model_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_7_class_0.score0(fdata);
  }
}
class rf_model_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* PSA */] <14.730078f ? 
         (data[2 /* PSA */] <2.850629f ? 
             (data[3 /* GLEASON */] <5.5f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <2.5019102f ? 
                     (data[2 /* PSA */] <1.3321455f ? 
                        1.0f : 
                        0.74152786f) : 
                    1.0f)) : 
             (data[0 /* AGE */] <61.5f ? 
                 (data[2 /* PSA */] <6.368411f ? 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                        0.8302636f : 
                        0.4120511f) : 
                     (data[2 /* PSA */] <7.862821f ? 
                        0.2010468f : 
                        0.61782235f)) : 
                 (Double.isNaN(data[0]) || data[0 /* AGE */] <72.5f ? 
                     (data[0 /* AGE */] <67.5f ? 
                        0.7819603f : 
                        0.69164675f) : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                        0.714094f : 
                        0.4190198f)))) : 
         (data[3 /* GLEASON */] <6.5f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <38.6501f ? 
                 (data[0 /* AGE */] <63.0f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <24.423866f ? 
                        0.7073945f : 
                        1.0f)) : 
                 (data[0 /* AGE */] <63.0f ? 
                    0.50385207f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* AGE */] <71.0f ? 
                 (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <22.540697f ? 
                        0.25024727f : 
                        0.03833314f) : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <75.26238f ? 
                        0.45994905f : 
                        0.0f)) : 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (data[2 /* PSA */] <19.611715f ? 
                        0.0f : 
                        0.7808778f) : 
                     (data[2 /* PSA */] <20.588043f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 103B, number of visited nodes = 24, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class rf_model_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_8_class_0.score0(fdata);
  }
}
class rf_model_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
         (Double.isNaN(data[2]) || data[2 /* PSA */] <38.55332f ? 
             (data[3 /* GLEASON */] <5.5f ? 
                 (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                     (data[2 /* PSA */] <5.6793733f ? 
                        1.0f : 
                        0.8369665f) : 
                    1.0f) : 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <6.575936f ? 
                     (data[0 /* AGE */] <54.5f ? 
                        1.0f : 
                        0.8160717f) : 
                     (data[0 /* AGE */] <55.5f ? 
                        0.3795227f : 
                        0.7024933f))) : 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <59.799477f ? 
                0.0f : 
                1.0f)) : 
         (data[2 /* PSA */] <14.730078f ? 
             (Double.isNaN(data[2]) || data[2 /* PSA */] <7.9312882f ? 
                 (data[0 /* AGE */] <68.5f ? 
                     (data[0 /* AGE */] <56.5f ? 
                        0.5023112f : 
                        0.20491274f) : 
                     (Double.isNaN(data[0]) || data[0 /* AGE */] <72.5f ? 
                        0.6657765f : 
                        0.13976556f)) : 
                 (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                     (data[0 /* AGE */] <61.5f ? 
                        0.37948394f : 
                        0.69860077f) : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <8.5f ? 
                        0.39492753f : 
                        0.0f))) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* AGE */] <70.5f ? 
                     (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
                        0.16594733f : 
                        0.55892485f) : 
                     (data[2 /* PSA */] <19.495312f ? 
                        0.0f : 
                        0.7786494f)) : 
                 (data[0 /* AGE */] <65.5f ? 
                    0.0f : 
                     (data[2 /* PSA */] <18.703125f ? 
                        1.0f : 
                        0.0f)))));
    return pred;
  } // constant pool size = 104B, number of visited nodes = 23, static init size = 60B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class rf_model_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += rf_model_Tree_9_class_0.score0(fdata);
  }
}
class rf_model_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* PSA */] <14.730078f ? 
         (data[2 /* PSA */] <2.850629f ? 
             (data[3 /* GLEASON */] <5.5f ? 
                1.0f : 
                 (data[0 /* AGE */] <60.5f ? 
                    1.0f : 
                     (data[2 /* PSA */] <1.3546875f ? 
                        1.0f : 
                        0.77213085f))) : 
             (Double.isNaN(data[3]) || data[3 /* GLEASON */] <6.5f ? 
                 (data[2 /* PSA */] <5.951832f ? 
                     (data[3 /* GLEASON */] <5.5f ? 
                        1.0f : 
                        0.8194202f) : 
                     (data[2 /* PSA */] <6.082272f ? 
                        0.0f : 
                        0.7532519f)) : 
                 (data[2 /* PSA */] <7.942156f ? 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <7.3368864f ? 
                        0.3934165f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.6608058f : 
                        0.33520982f)))) : 
         (Double.isNaN(data[2]) || data[2 /* PSA */] <66.84156f ? 
             (data[3 /* GLEASON */] <6.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* PSA */] <38.584618f ? 
                     (data[0 /* AGE */] <63.0f ? 
                        0.0f : 
                        0.7906787f) : 
                     (data[0 /* AGE */] <63.0f ? 
                        0.49380806f : 
                        0.0f)) : 
                 (Double.isNaN(data[1 /* RACE */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
                     (Double.isNaN(data[3]) || data[3 /* GLEASON */] <7.5f ? 
                        0.2946013f : 
                        0.13045815f) : 
                     (Double.isNaN(data[2]) || data[2 /* PSA */] <63.588963f ? 
                        0.39701855f : 
                        1.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 87B, number of visited nodes = 20, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


