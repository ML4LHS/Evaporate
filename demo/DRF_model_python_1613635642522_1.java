/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2021-02-18T03:07:37.113-05:00
  3.32.0.3
  
  Standalone prediction code with sample test data for DRFModel named DRF_model_python_1613635642522_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/DRF_model_python_1613635642522_1 > DRF_model_python_1613635642522_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m DRF_model_python_1613635642522_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="DRF_model_python_1613635642522_1", algorithm="drf")
public class DRF_model_python_1613635642522_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 5; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_DRF_model_python_1613635642522_1.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* displacement */ null,
    /* power */ null,
    /* weight */ null,
    /* acceleration */ null,
    /* year */ null,
    /* economy_20mpg */ DRF_model_python_1613635642522_1_ColInfo_5.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.3723076923076923,0.6276923076923077};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.3723076923076923,0.6276923076923077};

  public DRF_model_python_1613635642522_1() { super(NAMES,DOMAINS,"economy_20mpg"); }
  public String getUUID() { return Long.toString(5764038591620823576L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    DRF_model_python_1613635642522_1_Forest_0.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_1.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_2.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_3.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_4.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_5.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_6.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_7.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_8.score0(data,preds);
    DRF_model_python_1613635642522_1_Forest_9.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5852947526447385);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_DRF_model_python_1613635642522_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    NamesHolder_DRF_model_python_1613635642522_1_0.fill(VALUES);
  }
  static final class NamesHolder_DRF_model_python_1613635642522_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "displacement";
      sa[1] = "power";
      sa[2] = "weight";
      sa[3] = "acceleration";
      sa[4] = "year";
    }
  }
}
// The class representing column economy_20mpg
class DRF_model_python_1613635642522_1_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    DRF_model_python_1613635642522_1_ColInfo_5_0.fill(VALUES);
  }
  static final class DRF_model_python_1613635642522_1_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class DRF_model_python_1613635642522_1_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_0_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_0_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <177.15332f ? 
             (data[4 /* year */] <73.5f ? 
                0.10526316f : 
                0.0f) : 
            0.5f) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
             (data[1 /* power */] <118.5f ? 
                 (data[3 /* acceleration */] <15.83125f ? 
                    0.7f : 
                    1.0f) : 
                1.0f) : 
             (Double.isNaN(data[2]) || data[2 /* weight */] <3314.5f ? 
                0.09090909f : 
                0.7f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <177.15332f ? 
             (data[4 /* year */] <73.5f ? 
                0.8947368f : 
                1.0f) : 
            0.5f) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
             (data[1 /* power */] <118.5f ? 
                 (data[3 /* acceleration */] <15.83125f ? 
                    0.3f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* weight */] <3314.5f ? 
                0.90909094f : 
                0.3f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_1_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_1_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3096.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.95996f ? 
             (data[4 /* year */] <73.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* weight */] <2268.0f ? 
                    0.0f : 
                    0.33333334f) : 
                0.0f) : 
            0.33333334f) : 
         (data[2 /* weight */] <3428.5f ? 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <240.69336f ? 
                0.3846154f : 
                1.0f) : 
             (Double.isNaN(data[4]) || data[4 /* year */] <76.5f ? 
                1.0f : 
                0.9411765f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3072.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.95996f ? 
             (data[4 /* year */] <73.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* weight */] <2269.0f ? 
                    1.0f : 
                    0.6666667f) : 
                1.0f) : 
            0.6363636f) : 
         (data[2 /* weight */] <3428.5f ? 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <240.69336f ? 
                0.64285713f : 
                0.0f) : 
             (Double.isNaN(data[4]) || data[4 /* year */] <76.5f ? 
                0.0f : 
                0.05882353f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_2_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_2_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3096.5f ? 
         (data[4 /* year */] <75.5f ? 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <136.92383f ? 
                 (Double.isNaN(data[1]) || data[1 /* power */] <86.5f ? 
                    0.0f : 
                    0.25f) : 
                0.3846154f) : 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <153.4668f ? 
                0.0f : 
                0.09090909f)) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
             (Double.isNaN(data[4]) || data[4 /* year */] <75.5f ? 
                1.0f : 
                0.8235294f) : 
             (data[2 /* weight */] <3424.5f ? 
                0.4f : 
                0.6f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3072.5f ? 
         (data[4 /* year */] <75.5f ? 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <136.92383f ? 
                 (Double.isNaN(data[1]) || data[1 /* power */] <86.5f ? 
                    1.0f : 
                    0.75f) : 
                0.6666667f) : 
             (Double.isNaN(data[0]) || data[0 /* displacement */] <153.4668f ? 
                1.0f : 
                0.9f)) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
             (Double.isNaN(data[4]) || data[4 /* year */] <75.5f ? 
                0.0f : 
                0.22222222f) : 
             (data[2 /* weight */] <3424.5f ? 
                0.6f : 
                0.4f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_3_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_3_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <3081.0f ? 
             (data[0 /* displacement */] <85.03906f ? 
                0.18181819f : 
                 (Double.isNaN(data[1]) || data[1 /* power */] <85.0f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* acceleration */] <17.121876f ? 
                        0.0f : 
                        0.3f))) : 
            0.64285713f) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <78.5f ? 
             (data[1 /* power */] <115.5f ? 
                 (data[2 /* weight */] <3253.0f ? 
                    0.3f : 
                    0.9285714f) : 
                 (data[1 /* power */] <144.5f ? 
                    0.9f : 
                    1.0f)) : 
            0.30769232f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <3081.0f ? 
             (data[0 /* displacement */] <85.03906f ? 
                0.8181818f : 
                 (Double.isNaN(data[1]) || data[1 /* power */] <85.0f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* acceleration */] <17.121876f ? 
                        1.0f : 
                        0.7f))) : 
            0.35714287f) : 
         (Double.isNaN(data[4]) || data[4 /* year */] <78.5f ? 
             (data[1 /* power */] <115.5f ? 
                 (data[2 /* weight */] <3253.0f ? 
                    0.7f : 
                    0.071428575f) : 
                 (data[1 /* power */] <144.5f ? 
                    0.1f : 
                    0.0f)) : 
            0.6923077f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_4_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_4_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.95996f ? 
             (data[0 /* displacement */] <85.36437f ? 
                0.16666667f : 
                 (Double.isNaN(data[0]) || data[0 /* displacement */] <119.68304f ? 
                    0.0f : 
                     (data[4 /* year */] <76.5f ? 
                        0.15384616f : 
                        0.0f))) : 
            0.6f) : 
         (data[2 /* weight */] <3015.0f ? 
            0.15f : 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <15.300781f ? 
                 (data[2 /* weight */] <3622.0f ? 
                    0.9f : 
                    1.0f) : 
                0.7058824f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.95996f ? 
             (data[0 /* displacement */] <85.36437f ? 
                0.8333333f : 
                 (Double.isNaN(data[0]) || data[0 /* displacement */] <119.68304f ? 
                    1.0f : 
                     (data[4 /* year */] <76.5f ? 
                        0.84615386f : 
                        1.0f))) : 
            0.4f) : 
         (data[2 /* weight */] <3015.0f ? 
            0.85f : 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <15.300781f ? 
                 (data[2 /* weight */] <3622.0f ? 
                    0.1f : 
                    0.0f) : 
                0.29411766f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_5_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_5_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3096.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2895.5f ? 
             (data[4 /* year */] <73.5f ? 
                 (data[4 /* year */] <71.5f ? 
                    0.0f : 
                    0.16666667f) : 
                0.0f) : 
            0.3846154f) : 
         (data[1 /* power */] <107.5f ? 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <18.10625f ? 
                0.73333335f : 
                0.36363637f) : 
             (data[0 /* displacement */] <302.90625f ? 
                0.9285714f : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3072.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2895.0f ? 
             (data[4 /* year */] <73.5f ? 
                 (data[4 /* year */] <71.5f ? 
                    1.0f : 
                    0.8333333f) : 
                1.0f) : 
            0.61538464f) : 
         (data[1 /* power */] <107.5f ? 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <18.10625f ? 
                0.26666668f : 
                0.6363636f) : 
             (data[0 /* displacement */] <302.90625f ? 
                0.071428575f : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_6_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_6_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <190.68848f ? 
             (Double.isNaN(data[2]) || data[2 /* weight */] <2274.5f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* acceleration */] <18.433203f ? 
                     (data[1 /* power */] <92.5f ? 
                        0.0f : 
                        0.1f) : 
                    0.2f)) : 
            0.5882353f) : 
         (data[0 /* displacement */] <231.66992f ? 
             (data[3 /* acceleration */] <15.439453f ? 
                0.09090909f : 
                0.5714286f) : 
             (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
                 (data[0 /* displacement */] <253.77734f ? 
                    0.9285714f : 
                    1.0f) : 
                0.75f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <190.68848f ? 
             (Double.isNaN(data[2]) || data[2 /* weight */] <2274.5f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* acceleration */] <18.433203f ? 
                     (data[1 /* power */] <92.5f ? 
                        1.0f : 
                        0.9f) : 
                    0.8f)) : 
            0.4117647f) : 
         (data[0 /* displacement */] <231.66992f ? 
             (data[3 /* acceleration */] <15.439453f ? 
                0.90909094f : 
                0.42857143f) : 
             (Double.isNaN(data[4]) || data[4 /* year */] <77.5f ? 
                 (data[0 /* displacement */] <253.77734f ? 
                    0.071428575f : 
                    0.0f) : 
                0.25f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_7_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_7_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2974.0f ? 
             (data[4 /* year */] <73.5f ? 
                 (data[0 /* displacement */] <103.08594f ? 
                    0.27272728f : 
                    0.125f) : 
                0.0f) : 
            0.6111111f) : 
         (data[2 /* weight */] <3432.5f ? 
             (Double.isNaN(data[4]) || data[4 /* year */] <76.5f ? 
                0.68421054f : 
                0.13333334f) : 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <16.071875f ? 
                1.0f : 
                0.9f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* power */] <97.5f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2974.0f ? 
             (data[4 /* year */] <73.5f ? 
                 (data[0 /* displacement */] <103.08594f ? 
                    0.72727275f : 
                    0.875f) : 
                1.0f) : 
            0.3888889f) : 
         (data[2 /* weight */] <3432.5f ? 
             (Double.isNaN(data[4]) || data[4 /* year */] <76.5f ? 
                0.31578946f : 
                0.8666667f) : 
             (Double.isNaN(data[3]) || data[3 /* acceleration */] <16.071875f ? 
                0.0f : 
                0.1f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_8_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_8_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* displacement */] <212.49512f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2908.5f ? 
             (data[3 /* acceleration */] <13.64375f ? 
                0.21428572f : 
                 (data[4 /* year */] <73.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* displacement */] <114.6875f ? 
                        0.0f : 
                        0.18181819f) : 
                    0.0f)) : 
            0.5f) : 
         (data[0 /* displacement */] <231.67763f ? 
            0.6666667f : 
             (Double.isNaN(data[4]) || data[4 /* year */] <75.5f ? 
                1.0f : 
                0.9f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* displacement */] <212.49512f ? 
         (Double.isNaN(data[2]) || data[2 /* weight */] <2908.5f ? 
             (data[3 /* acceleration */] <13.64375f ? 
                0.78571427f : 
                 (data[4 /* year */] <73.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* displacement */] <114.6875f ? 
                        1.0f : 
                        0.8181818f) : 
                    1.0f)) : 
            0.5f) : 
         (data[0 /* displacement */] <231.67763f ? 
            0.33333334f : 
             (Double.isNaN(data[4]) || data[4 /* year */] <75.5f ? 
                0.0f : 
                0.1f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class DRF_model_python_1613635642522_1_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += DRF_model_python_1613635642522_1_Tree_9_class_0.score0(fdata);
    preds[2] += DRF_model_python_1613635642522_1_Tree_9_class_1.score0(fdata);
  }
}
class DRF_model_python_1613635642522_1_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3096.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.58398f ? 
             (data[3 /* acceleration */] <13.64375f ? 
                0.25f : 
                 (Double.isNaN(data[1]) || data[1 /* power */] <86.5f ? 
                    0.0f : 
                     (data[0 /* displacement */] <114.65625f ? 
                        0.083333336f : 
                        0.0f))) : 
            0.53846157f) : 
         (data[0 /* displacement */] <231.66992f ? 
             (data[3 /* acceleration */] <17.45f ? 
                0.5f : 
                0.54545456f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class DRF_model_python_1613635642522_1_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* weight */] <3072.5f ? 
         (Double.isNaN(data[0]) || data[0 /* displacement */] <198.58398f ? 
             (data[3 /* acceleration */] <13.64375f ? 
                0.75f : 
                 (Double.isNaN(data[1]) || data[1 /* power */] <86.5f ? 
                    1.0f : 
                     (data[0 /* displacement */] <114.65625f ? 
                        0.9166667f : 
                        1.0f))) : 
            0.5f) : 
         (data[0 /* displacement */] <231.66992f ? 
             (data[3 /* acceleration */] <17.45f ? 
                0.5f : 
                0.45454547f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


